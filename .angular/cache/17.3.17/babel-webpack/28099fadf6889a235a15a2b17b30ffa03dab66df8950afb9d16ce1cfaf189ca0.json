{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ListingService = /*#__PURE__*/(() => {\n  class ListingService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAllListings(params) {\n      let httpParams = new HttpParams();\n      if (params) {\n        // Map Angular params to original API params\n        if (params.page !== undefined) httpParams = httpParams.set('page', params.page.toString());\n        if (params.pageSize !== undefined) httpParams = httpParams.set('limit', params.pageSize.toString());\n        if (params.category) httpParams = httpParams.set('category', params.category);\n        if (params.location) httpParams = httpParams.set('location', params.location);\n        if (params.search) httpParams = httpParams.set('search', params.search);\n        if (params.sort) httpParams = httpParams.set('sort', params.sort);\n      }\n      return this.http.get(`/Listings/minimal`, {\n        params: httpParams\n      });\n    }\n    getListingById(id) {\n      return this.http.get(`/Listings/${id}`);\n    }\n    createListing(listing) {\n      const formData = new FormData();\n      formData.append('name', listing.name);\n      formData.append('description', listing.description);\n      formData.append('price', listing.price.toString());\n      formData.append('category', listing.category);\n      formData.append('location', listing.location);\n      listing.pictures.forEach((file, index) => {\n        formData.append(`Picture${index + 1}`, file);\n      });\n      return this.http.post(`/Listings`, formData);\n    }\n    updateListing(id, listing) {\n      return this.http.put(`/Listings/${id}`, listing);\n    }\n    deleteListing(id) {\n      return this.http.delete(`/Listings/${id}`);\n    }\n    getUserListings(userId) {\n      return this.http.get(`/Listings/${userId}/listings`);\n    }\n    getListingPictures(id) {\n      return this.http.get(`/pictures/${id}`);\n    }\n    static {\n      this.ɵfac = function ListingService_Factory(t) {\n        return new (t || ListingService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ListingService,\n        factory: ListingService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ListingService;\n})();","map":{"version":3,"names":["HttpParams","ListingService","constructor","http","getAllListings","params","httpParams","page","undefined","set","toString","pageSize","category","location","search","sort","get","getListingById","id","createListing","listing","formData","FormData","append","name","description","price","pictures","forEach","file","index","post","updateListing","put","deleteListing","delete","getUserListings","userId","getListingPictures","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/deryglazov/Documents/dev/ML/maltalist-angular/src/app/services/listing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Listing {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  category: string;\n  location: string;\n  userId: string;\n  picture1: string | null;\n  createdAt: string;\n  updatedAt: string;\n  isPromoted?: boolean;\n}\n\nexport interface ListingSummary {\n  id: number;\n  title: string;\n  price: number;\n  category: string;\n  location: string;\n  picture1: string | null;\n  createdAt: string;\n  isPromoted?: boolean;\n}\n\nexport interface GetAllListingsResponse {\n  listings: ListingSummary[];\n  totalNumber: number;\n  page: number;\n}\n\nexport interface CreateListingRequest {\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  location: string;\n  pictures: File[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListingService {\n  constructor(private http: HttpClient) {}\n\n  getAllListings(params?: {\n    page?: number;\n    pageSize?: number;\n    category?: string;\n    location?: string;\n    search?: string;\n    sort?: string;\n  }): Observable<GetAllListingsResponse> {\n    let httpParams = new HttpParams();\n\n    if (params) {\n      // Map Angular params to original API params\n      if (params.page !== undefined) httpParams = httpParams.set('page', params.page.toString());\n      if (params.pageSize !== undefined) httpParams = httpParams.set('limit', params.pageSize.toString());\n      if (params.category) httpParams = httpParams.set('category', params.category);\n      if (params.location) httpParams = httpParams.set('location', params.location);\n      if (params.search) httpParams = httpParams.set('search', params.search);\n      if (params.sort) httpParams = httpParams.set('sort', params.sort);\n    }\n\n    return this.http.get<GetAllListingsResponse>(`/Listings/minimal`, { params: httpParams });\n  }\n\n  getListingById(id: string): Observable<Listing> {\n    return this.http.get<Listing>(`/Listings/${id}`);\n  }\n\n  createListing(listing: CreateListingRequest): Observable<Listing> {\n    const formData = new FormData();\n    formData.append('name', listing.name);\n    formData.append('description', listing.description);\n    formData.append('price', listing.price.toString());\n    formData.append('category', listing.category);\n    formData.append('location', listing.location);\n\n    listing.pictures.forEach((file, index) => {\n      formData.append(`Picture${index + 1}`, file);\n    });\n\n    return this.http.post<Listing>(`/Listings`, formData);\n  }\n\n  updateListing(id: string, listing: Partial<Listing>): Observable<Listing> {\n    return this.http.put<Listing>(`/Listings/${id}`, listing);\n  }\n\n  deleteListing(id: string): Observable<void> {\n    return this.http.delete<void>(`/Listings/${id}`);\n  }\n\n  getUserListings(userId: string): Observable<ListingSummary[]> {\n    return this.http.get<ListingSummary[]>(`/Listings/${userId}/listings`);\n  }\n\n  getListingPictures(id: string): Observable<string[]> {\n    return this.http.get<string[]>(`/pictures/${id}`);\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AA8C7D,WAAaC,cAAc;EAArB,MAAOA,cAAc;IACzBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvCC,cAAcA,CAACC,MAOd;MACC,IAAIC,UAAU,GAAG,IAAIN,UAAU,EAAE;MAEjC,IAAIK,MAAM,EAAE;QACV;QACA,IAAIA,MAAM,CAACE,IAAI,KAAKC,SAAS,EAAEF,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,MAAM,EAAEJ,MAAM,CAACE,IAAI,CAACG,QAAQ,EAAE,CAAC;QAC1F,IAAIL,MAAM,CAACM,QAAQ,KAAKH,SAAS,EAAEF,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,OAAO,EAAEJ,MAAM,CAACM,QAAQ,CAACD,QAAQ,EAAE,CAAC;QACnG,IAAIL,MAAM,CAACO,QAAQ,EAAEN,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,UAAU,EAAEJ,MAAM,CAACO,QAAQ,CAAC;QAC7E,IAAIP,MAAM,CAACQ,QAAQ,EAAEP,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,UAAU,EAAEJ,MAAM,CAACQ,QAAQ,CAAC;QAC7E,IAAIR,MAAM,CAACS,MAAM,EAAER,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAACS,MAAM,CAAC;QACvE,IAAIT,MAAM,CAACU,IAAI,EAAET,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,MAAM,EAAEJ,MAAM,CAACU,IAAI,CAAC;;MAGnE,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAyB,mBAAmB,EAAE;QAAEX,MAAM,EAAEC;MAAU,CAAE,CAAC;IAC3F;IAEAW,cAAcA,CAACC,EAAU;MACvB,OAAO,IAAI,CAACf,IAAI,CAACa,GAAG,CAAU,aAAaE,EAAE,EAAE,CAAC;IAClD;IAEAC,aAAaA,CAACC,OAA6B;MACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,OAAO,CAACI,IAAI,CAAC;MACrCH,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,OAAO,CAACK,WAAW,CAAC;MACnDJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,OAAO,CAACM,KAAK,CAAChB,QAAQ,EAAE,CAAC;MAClDW,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,OAAO,CAACR,QAAQ,CAAC;MAC7CS,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,OAAO,CAACP,QAAQ,CAAC;MAE7CO,OAAO,CAACO,QAAQ,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;QACvCT,QAAQ,CAACE,MAAM,CAAC,UAAUO,KAAK,GAAG,CAAC,EAAE,EAAED,IAAI,CAAC;MAC9C,CAAC,CAAC;MAEF,OAAO,IAAI,CAAC1B,IAAI,CAAC4B,IAAI,CAAU,WAAW,EAAEV,QAAQ,CAAC;IACvD;IAEAW,aAAaA,CAACd,EAAU,EAAEE,OAAyB;MACjD,OAAO,IAAI,CAACjB,IAAI,CAAC8B,GAAG,CAAU,aAAaf,EAAE,EAAE,EAAEE,OAAO,CAAC;IAC3D;IAEAc,aAAaA,CAAChB,EAAU;MACtB,OAAO,IAAI,CAACf,IAAI,CAACgC,MAAM,CAAO,aAAajB,EAAE,EAAE,CAAC;IAClD;IAEAkB,eAAeA,CAACC,MAAc;MAC5B,OAAO,IAAI,CAAClC,IAAI,CAACa,GAAG,CAAmB,aAAaqB,MAAM,WAAW,CAAC;IACxE;IAEAC,kBAAkBA,CAACpB,EAAU;MAC3B,OAAO,IAAI,CAACf,IAAI,CAACa,GAAG,CAAW,aAAaE,EAAE,EAAE,CAAC;IACnD;;;yBA3DWjB,cAAc,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAdzC,cAAc;QAAA0C,OAAA,EAAd1C,cAAc,CAAA2C,IAAA;QAAAC,UAAA,EAFb;MAAM;IAAA;;SAEP5C,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}