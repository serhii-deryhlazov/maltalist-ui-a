{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      // Load user from localStorage on service initialization\n      const storedUser = localStorage.getItem('current_user');\n      if (storedUser) {\n        try {\n          const user = JSON.parse(storedUser);\n          this.currentUserSubject.next(user);\n        } catch (error) {\n          console.error('Error parsing stored user:', error);\n          localStorage.removeItem('current_user');\n        }\n      }\n    }\n    get currentUser() {\n      return this.currentUserSubject.value;\n    }\n    handleGoogleSignIn(response) {\n      return this.http.post(`/auth/google`, {\n        credential: response.credential\n      }).pipe(tap(user => {\n        if (user && user.id) {\n          localStorage.setItem('current_user', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n      }));\n    }\n    logout() {\n      localStorage.removeItem('current_user');\n      this.currentUserSubject.next(null);\n    }\n    isAuthenticated() {\n      return this.currentUser !== null;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","user","JSON","parse","next","error","console","removeItem","currentUser","value","handleGoogleSignIn","response","post","credential","pipe","id","setItem","stringify","logout","isAuthenticated","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/deryglazov/Documents/dev/ML/maltalist-angular/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  picture?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Load user from localStorage on service initialization\n    const storedUser = localStorage.getItem('current_user');\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('current_user');\n      }\n    }\n  }\n\n  get currentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  handleGoogleSignIn(response: any): Observable<User> {\n    return this.http.post<User>(`/auth/google`, {\n      credential: response.credential\n    }).pipe(\n      tap(user => {\n        if (user && user.id) {\n          localStorage.setItem('current_user', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n        }\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('current_user');\n    this.currentUserSubject.next(null);\n  }\n\n  isAuthenticated(): boolean {\n    return this.currentUser !== null;\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAYpC,WAAaC,WAAW;EAAlB,MAAOA,WAAW;IAItBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAHhB,KAAAC,kBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;MAC5D,KAAAM,YAAY,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;MAG1D;MACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACvD,IAAIF,UAAU,EAAE;QACd,IAAI;UACF,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;UACnC,IAAI,CAACH,kBAAkB,CAACS,IAAI,CAACH,IAAI,CAAC;SACnC,CAAC,OAAOI,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;UAClDN,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;;;IAG7C;IAEA,IAAIC,WAAWA,CAAA;MACb,OAAO,IAAI,CAACb,kBAAkB,CAACc,KAAK;IACtC;IAEAC,kBAAkBA,CAACC,QAAa;MAC9B,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAO,cAAc,EAAE;QAC1CC,UAAU,EAAEF,QAAQ,CAACE;OACtB,CAAC,CAACC,IAAI,CACLvB,GAAG,CAACU,IAAI,IAAG;QACT,IAAIA,IAAI,IAAIA,IAAI,CAACc,EAAE,EAAE;UACnBhB,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEd,IAAI,CAACe,SAAS,CAAChB,IAAI,CAAC,CAAC;UAC1D,IAAI,CAACN,kBAAkB,CAACS,IAAI,CAACH,IAAI,CAAC;;MAEtC,CAAC,CAAC,CACH;IACH;IAEAiB,MAAMA,CAAA;MACJnB,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;MACvC,IAAI,CAACZ,kBAAkB,CAACS,IAAI,CAAC,IAAI,CAAC;IACpC;IAEAe,eAAeA,CAAA;MACb,OAAO,IAAI,CAACX,WAAW,KAAK,IAAI;IAClC;;;yBA1CWhB,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;MAAA;IAAA;;;eAAX/B,WAAW;QAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;QAAAC,UAAA,EAFV;MAAM;IAAA;;SAEPlC,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}